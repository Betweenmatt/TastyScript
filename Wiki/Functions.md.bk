# Table of Contents
* [AppPackage](#apppackage)
* [CheckScreen](#checkscreen)
* [ConnectDevice](#connectdevice)
* [KeyEvent](#keyevent)
* [If](#if)
* [ImageLocation](#imagelocation)
* [Loop](#loop)
* [LongTouch](#longtouch)
* [Print](#print)
* [PrintLine](#printline)
* [SendText](#sendtext)
* [SetDefaultSleep](#setdefaultsleep)
* [SetTemplateDefaultOptions](#settemplatedefaultoptions)
* [Sleep](#sleep)
* [Swipe](#swipe)
* [TakeScreenshot](#takescreenshot)
* [Touch](#touch)

---

## AppPackage
 AppPackage(*PackageName*) | AppPackage() |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *PackageName*(string) | 
*Extensions* |  | 
*Override* | sealed | 
#### Description
Sets the current App Package. When an App Package has been set, the Driver commands will not be sent if the App Package is not the current focus. This must be called after the `ConnectDevice()` function.

**Side Note:** Technically you don't need the full package name, or you could even use the package name plus the activity name; whichever floats your boat. The focus check works by calling the adb shell command `dumpsys window windows | grep -E 'mCurrentFocus'` and checks if the result contains the `AppPackage()` you have set. If it does, it continues to call the command; if it doesn't, it stops all commands and re-checks for the package every 5 seconds.

***v1.3.0+*** You can now omit the arguments for this function, and the driver will set the AppPackage() to whatever the current focus is. Just make sure you have your game on focus when you start the script!

#### Examples
`AppPackage("com.vespainteractive.KingsRad");`

---

## CheckScreen
CheckScreen( *SuccessFunction*, *FailFunction*,*SuccessPath* ) | CheckScreen(*SuccessFunction*, *FailFunction*,*SuccessPath*, *SuccessPath* ) | | | |
:---:|:---:|:---:|:---:|:---:
*Expected Arguments* | *SuccessFunction*(string) | *FailFunction*(string) | *SuccessPath*(string) |
*Overload* | *SuccessFunction*(string) | *FailFunction*(string) | *SuccessPath*(string) | *FailPath*(string) 
*Extensions* | [.For()](/Wiki/Extensions.md#for) | [.Threshold()](/Wiki/Extensions.md#threshold) | |
*Override* | sealed | | |

#### Description
Note: For this function to work correctly, you must provide a part of an image to check against. This is called the template. The template must be at most half of the screen being checked. For best results, make sure the template is not mono-tone, and has as much pixel to pixel difference as possible. Do not use an inadequate template and just lower the threshold or you will have a lot of false positives.

Takes a screenshot of the current device, and compares it to the image at the *SuccessPath*. If the screenshot passes the threshold, Invoke *SuccessFunction*; else Invoke *FailFunction*.

Use the overload to include a fail-check image to compare against. If the image at *SuccessPath* passes the threshold, Invoke *SuccessFunction*; then if the image at *FailPath* passes the threshold, Invoke *FailFunction*; else throws DriverException.

**NOTE*** `.Threshold()` is obsolete with v1.3.2, please start using `.Prop()` extension. `.Prop()` uses the same parameters as [SetTemplateDefaultOptions()](#settemplatedefaultoptions) except you don't add the arguments to an array first.

#### Examples
```
function.Example(){
    CheckScreen("SuccessFunction", "FailFunction", "img/test1.png");
}
function.SuccessFunction(){
    PrintLine("Succeeded!");
}
function.FailFunction(){
    PrintLine("Failed!");
}

#lambda expression example
function.Example(){
    CheckScreen(=>(){
            PrintLine("Succeeded!");
        },=>(){
            PrintLine("Failed!");
        }, "img/test1.png");
}

```

---

## ConnectDevice
ConnectDevice(*SerialNumber*) | | | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *SerialNumber*(string) |  |
*Extensions* |  |  | 
*Override* | sealed | |
#### Description
Connects to the first device found with the given *SerialNumber*.

***v1.3.0+*** You can now omit the arguments for this function, and the driver will set the device to whatever the first device in the list is. Just make sure you only have one device connected to ADB, or your desired device is first in the list!
#### Examples
`ConnectDevice("DEVICE");`


---

## If
If(*Conditional*) | | | | |
:---:|:---:|:---:|:---:|:---:
*Expected Arguments* | *Conditional*(string) |  | |
*Extensions* | [.And()](/Wiki/Extensions.md#and) | [.Or()](/Wiki/Extensions.md#or) | [.Then()](/Wiki/Extensions.md#then) | [.Else()](/Wiki/Extensions.md#else)  |
*Override* | sealed | |
#### Description
Evaluates the conditional statement, and chooses the invoking extension `.Then()` or `.Else()` based on the result. `.Then()` is the only required extension for this function.

You can use the extensions `.And()` and `.Or()` to narrow down your conditional.

The conditional statement evaluates an expression based on the operator, and results in a bool `True` or `False`, which are represented to the compiler as a string. If you wish to create an always passing conditional, pass `"True"` or `"False"` as your conditional. The currently allowed operators are `==` `!=` `>=` `<=` `<` `>`
#### Examples
```
override.Start(){
    Loop(=>(var i){
        var even = [i % 2];
        If(even == 0)
            .Then(=>(){
                PrintLine("This iteration is even");
            });     
    });

    Loop(=>(var i){
        var even = [i % 2];
        If(even != 0).And(i > 100)
            .Then(=>(){
                PrintLine("This iteration is odd");
                PrintLine("And the iteration is above 100");
            });     
    });

    Loop(=>(var i){
        var even = [i % 2];
        If(even != 0).Or(i < 9)
            .Then(=>(){
                PrintLine("This iteration is odd");
                PrintLine("Or the iteration is less than 9");
            }).Else(=>(){
                PrintLine("This iteration is even");
                PrintLine("Or the iteration is greater than 9");
            });     
    });
}
```

---

## ImageLocation
 ***Introduced in v1.3.2***
 
 ImageLocation(*Path*) |  |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Path*(string) |  | 
*Extensions* | [.For()](/Wiki/Extensions.md#for) | [.Prop()]() |  
*Override* | true | 
#### Description
Checks the image at the path given. If the image exists, returns an array `[x,y]`. If the image does not exist, returns `null`.

**NOTE*** `.Prop()` uses the same parameters as [SetTemplateDefaultOptions()](#settemplatedefaultoptions) except you don't add the arguments to an array first.

#### Examples
```
var coords = ImageLocation("myimg.png");
if(!?coords).Then(=>(){
	var x = coords.GetItem(0);
	var y = coords.GetItem(1);
	Touch(x,y);
});
```
---

## KeyEvent
 ***Introduced in v1.2.1***
 
 KeyEvent(*Key*) |  |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Key*(string) |  | 
*Extensions* | [.For()](/Wiki/Extensions.md#for) | 
*Override* | true | 
#### Description
Sends the given key event to the currently connected device. Key Events are case sensitive, must be as a string, and must be one of the following:

Menu, SoftRight, Home, Back, Call, EndCall, Zero, One, Two, Three, Four, Five, Six. Seven, Eight, Nine, Star, Pound, DPadUp, DPadDown, DPadLeft, DPadRight, DPadCenter, VolumeUp, VolumeDown, Power, Camera, Clear, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, Comma, Period, AltLeft, AltRight, ShiftLeft, ShiftRight, Tab, Space, Sym, Explorer, Envelope, Enter, Del, Grave, Minus, Equals, LeftBracket, RightBracket, BackSlash, SemiColon, Apostrophe, Slash, At, Num, HeadSetHook, Focus, Plus, Menu2, Notification, Search

***Note:*** The Menu and Menu2 events are eventcode 1 and 82 respectively. I'm not sure if there is a difference between the two so I included both.

#### Examples
`KeyEvent("Back");`

---

## Loop
Loop(*Function*) | | | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Function*(string) |  |
*Extensions* | [.For()](/Wiki/Extensions.md#for) |  | 
*Override* | sealed | |
#### Description
Loops the invoked *Function*. For extension is required. The invoked function *must* have at least one parameter to use this function!

**NEW:** in 1.2.2, you can use the functions `Break()` to break away from the current loop, or `Continue()` to skip the rest of the current iteration; moving on to the next.

#### Examples
```
function.Example(){
    Loop("LoopFunction").For(12);
}
function.LoopFunction(i){
    PrintLine("Iteration: ").Concat(i);
}

#lambda example
function.Example(){
    Loop(=>(var i){
        PrintLine("Iteration: ").Concat(i);
        If(i > 10)
            .Then(=>(){
                #breaks the loop on the 11th iteration
                Break();
            });
    });
}
```

---

## LongTouch
***Introduced in v1.2.1***

 LongTouch(*XPos*, *YPos*, *Duration*) | LongTouch(*XPos*, *YPos*, *Duration*, *Sleep*) |  | ||
:---:|:---:|:---:|:---:|:---:
*Expected Arguments* | *XPos*(number) | *YPos*(number) | *Duration*|
*Overload* | *XPos*(number) | *YPos*(number) | *Duration* | *Sleep*(number)
*Extensions* | [.For()](/Wiki/Extensions.md#for) | 
*Override* | true | 
#### Description
Touches the currently connected device at the given location for *Duration* amount of time. Overload the function with a 3rd argument *Sleep* to bypass the DefaultSleep timer. *Note: The DefaultSleepTimer is defaulted at 1200ms. Also every ADB command currently executes asynchronously, but has a 300ms sleep timer in between commands to prevent event bursting due to user error or lag spikes. The DefaultSleepTimer can be changed, but the 300ms command sleep can not.*
#### Examples
`LongTouch(500,500,100);`

`LongTouch(1546,645,100,500);#only sleep for half a second`

---

## Print
Print(*Input*) | | | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Input*(string, number) |  |
*Extensions* | [.For()](/Wiki/Extensions.md#for) | [.Concat()](/Wiki/Extensions.md#concat) | [.Color()](/Wiki/Extensions.md#color)
*Override* | true | |
#### Description
Prints the given argument in the console.

*Edit:* The extension `.AddParams()` is deprecated from use with this function. Please use `.Concat()` instead [.Concat()](/Wiki/Extensions.md#concat)
#### Examples
`Print("Hello,");`

`Print(" World!");`

---

## PrintLine
 PrintLine(*Input*) |  |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Input*(string, number) |  |
*Extensions* | [.For()](/Wiki/Extensions.md#for) | [.Concat()](/Wiki/Extensions.md#concat) | [.Color()](/Wiki/Extensions.md#color)
*Override* | true | |
#### Description
Prints the given argument in the console followed by a new line.

*Edit:* The extension `.AddParams()` is deprecated from use with this function. Please use `.Concat()` instead [.Concat()](/Wiki/Extensions.md#concat)
#### Examples
`PrintLine("Hello, World!");`

---

## SendText
 ***Introduced in v1.2.1***
 
 SendText(*Text*) |  |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Text*(string) |  | 
*Extensions* | [.For()](/Wiki/Extensions.md#for) | 
*Override* | true | 
#### Description
Sends the given text string to the connected device which will be typed into any Android Text Box. 

#### Examples
`SendText("Hello, World!");`

---

## SetDefaultSleep
SetDefaultSleep(*Sleep*) | | | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Sleep*(number) |  |
*Extensions* |  |  | 
*Override* | true | |
#### Description
Sets the default sleep timer to the number (in milliseconds) provided *Sleep*. Script default is set at 1200.
#### Examples
`SetDefaultSleep(3000);#3 seconds`

---

## SetTemplateDefaultOptions
***Introduced in v1.3.2***

SetTemplateDefaultOptions(*Options*) | | | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Options*(array) |  |
*Extensions* |  |  | 
*Override* | true | |
#### Description
Sets the default template options for any function utilizing the AnalyzeScreen class(`CheckScreen()`,`ImageLocation()`). The array can 7 items in the order of `Threshold, Reduction, Split, CustomX, CustomY, CustomWidth, CustomHeight`. If you wish to not edit a value, enter `null` as the value.

Defaults:

 * Threshold = 90
 * Reduction = 20
 * Split = "All"
 * CustomX - CustomHeight = 0

Description:
 
 * Threshold is for how close the image match should be. If you have a template that is reporting success when it shouldnt be, turn this up.
 * Reduction is the percentage the images are reduced to, with a value of 20, the source and template image are reduced to 20% of their actual size. The smaller the size, the faster it takes to evaluate but at the cost of accuracy.
 * Split takes a string input that must be one of the following: `"All","Top","Bottom","Left","Right","Q1","Q2","Q3","Q4","Custom"` `All` means the source is not split at all. `Top,Bottom,Left,Right` split the source image in half, the selected item is the side the template is checked against. `Q1` is top left, `Q2` top right, `Q3` bottom left, and `Q4` is bottom right. `Custom` lets you define a rectangle to crop by.
 * CustomX is the `x` location to start the custom crop
 * CustomY is the `y` location to start the custom crop
 * CustomWidth is the width of your custom crop
 * CustomHeight is the width of your custom crop.
 
 By setting Custom, and giving parameters you can have your template checked against a much smaller area of the screen.
 
#### Examples
```
var arr = array(null,25,"Q3");#ignore threshold, set reduction and split, ignore everything else
var set = SetTemplateDefaultOptions(arr);
PrintLine(set);
#prints [90,25,Q4,0,0,0,0]
#*the variable assignment is not required*
```

---

## Sleep
Sleep(*Sleep*) | | | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Sleep*(number) |  |
*Extensions* | [.For()](/Wiki/Extensions.md#for) |  | 
*Override* | true | |
#### Description
Sleeps for the number of miliseconds provided in *Sleep*. Defaults to **SetDefaultSleep**.
#### Examples
`Sleep(3000);#3 seconds`

---

## Swipe
***Introduced in v1.2.1***

|Swipe(*XPos1*, *YPos1*, *XPos2*, *YPos2*, *Duration*) | Swipe(*XPos1*, *YPos1*, *XPos2*, *YPos2*, *Duration*, *Sleep*)| | | | | |
|:---:|:---:|:---:|:---:|:---:|:---:|:---:|
|*Expected Arguments* | *XPos1*(number) | *YPos1*(number) | *XPos2*(number) | *YPos2*(number) | *Duration* | |
|*Overload* | *XPos1*(number) | *YPos1*(number) | *XPos2*(number) | *YPos2*(number) | *Duration* | *Sleep*(number) |
|*Extensions* | [.For()](/Wiki/Extensions.md#for) | | | | | |
|*Override* | true | | | | | |

#### Description
Swipes the currently connected device at the given location for *Duration* amount of time. *XPos1* and *YPos1* are the start locations, *XPos2* and *YPos2* are the end locations. Overload the function with a 3rd argument *Sleep* to bypass the DefaultSleep timer. *Note: The DefaultSleepTimer is defaulted at 1200ms. Also every ADB command currently executes asynchronously, but has a 300ms sleep timer in between commands to prevent event bursting due to user error or lag spikes. The DefaultSleepTimer can be changed, but the 300ms command sleep can not.*
#### Examples
`Swipe(100,200,100,1200,100);#swipes down the y axis over a 100ms duration`

---

## TakeScreenshot
 TakeScreenshot(*Path*) |  |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *Path*(string) |
*Extensions* | [.For()](/Wiki/Extensions.md#for) | 
*Override* | sealed | 
#### Description
Takes a screenshot of the connected device, and saves it to the path provided. *Path given must use the file extension '.png'*
#### Examples
`TakeScreenshot("SS/testimg.png");`

---

## Timer
 Timer() |  |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* |  |
*Extensions* | .Start() | .Stop() | .Print() 
*Override* | sealed | 
#### Description
A simple static performance timer. Use `.Start()` to start the timer, and to print the current value use either the `.Print()` extension or use it as the arguments in a `PrintLine()`. Make sure you call `.Stop()` when you're done with the timer!
#### Examples
```
override.Start(){
    Timer.Start();
    PrintLine(Timer());
    Timer.Stop();    
}
```

---

## Touch
 Touch(*XPos*, *YPos*) | Touch(*XPos*, *YPos*, *Sleep*) |  | |
:---:|:---:|:---:|:---:
*Expected Arguments* | *XPos*(number) | *YPos*(number)
*Overload* | *XPos*(number) | *YPos*(number) | *Sleep*(number)
*Extensions* | [.For()](/Wiki/Extensions.md#for) | 
*Override* | true | 
#### Description
Touches the currently connected device at the given location. Overload the function with a 3rd argument *Sleep* to bypass the DefaultSleep timer. *Note: The DefaultSleepTimer is defaulted at 1200ms. Also every ADB command currently executes asynchronously, but has a 300ms sleep timer in between commands to prevent event bursting due to user error or lag spikes. The DefaultSleepTimer can be changed, but the 300ms command sleep can not.*
#### Examples
`Touch(12,24);`

`Touch(1546,645,500);#only sleep for half a second`

---

