using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace TastyScript.IFunction.Tokens
{
    public class TArray : Token
    {
        public string[] Arguments { get; private set; }
        public override string Value
        {
            get
            {
                return ToString();
            }
        }
        public TArray(string name, string[] val, bool locked = false)
        {
            Name = name;
            _value = "<Type.TArray>";
            Arguments = val;
            IsLocked = locked;
        }
        public TArray(string name, string val, bool locked = false)
            : this(name, new string[] { }, locked)
        {
            Arguments = ReturnArgsArray(val.Substring(1, val.Length - 2));
        }
        public string[] Add(string s)
        {
            if (Arguments == null || Arguments.Length < 1 || (Arguments.Length == 1 && Arguments[0] == ""))
                Arguments = new string[] { s };
            else
                Arguments = Arguments.Concat(Enumerable.Repeat(s, 1)).ToArray();
            return Arguments;
        }
        public void Remove(int index)
        {
            var newArgs = Arguments.ToList();
            newArgs.RemoveAt(index);
            Arguments = newArgs.ToArray();
        }
        public override string ToString()
        {
            return "[" + $"{string.Join(",", Arguments)}" + "]";
        }
        public string[] ReturnArgsArray()
        {
            return Arguments;
        }
        private string[] ReturnArgsArray(string args)
        {
            if (args == null)
                return new string[] { };
            var output = args;
            var index = 0;
            Dictionary<string, string> stringParts = new Dictionary<string, string>();
            Dictionary<string, string> parenParts = new Dictionary<string, string>();
            if (args.Contains("\""))
            {
                var stringRegex = new Regex("\"([^\"\"]*)\"", RegexOptions.Multiline);
                foreach (var s in stringRegex.Matches(output))
                {
                    var token = "{AutoGeneratedToken" + index + "}";
                    stringParts.Add(token, s.ToString());
                    output = output.Replace(s.ToString(), token);
                    index++;
                }
            }
            if (args.Contains("[") && args.Contains("]"))
            {
                var reg = new Regex(@"(?:(?:\[(?>[^\[\]]+|\[(?<number>)|\](?<-number>))*(?(number)(?!))\])|[^[]])+");
                foreach (var x in reg.Matches(output))
                {
                    var token = "{AutoGeneratedToken" + index + "}";
                    parenParts.Add(token, x.ToString());
                    output = output.Replace(x.ToString(), token);
                    index++;
                }
            }
            var splode = output.Split(',');

            for (var i = 0; i < splode.Length; i++)
            {
                foreach (var p in parenParts)
                {
                    if (splode[i].Contains(p.Key))
                        splode[i] = splode[i].Replace(p.Key, p.Value);
                }
            }
            for (var i = 0; i < splode.Length; i++)
            {
                foreach (var p in stringParts)
                {
                    if (splode[i].Contains(p.Key))
                        splode[i] = splode[i].Replace(p.Key, p.Value).Replace("\"", "");
                }
            }
            return splode;
        }
    }
}
